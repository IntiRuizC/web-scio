stages:
  - build
  - deploy

variables:
  IMAGE_NAME: "scio-website"
  IMAGE_TAG: "$CI_COMMIT_SHORT_SHA"
  DOCKER_TLS_CERTDIR: "/certs"

# Build Docker image
build_production:
  stage: build
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  script:
    # Build production Docker image
    - docker build -t $IMAGE_NAME:$IMAGE_TAG .
    - docker tag $IMAGE_NAME:$IMAGE_TAG $IMAGE_NAME:latest

    # Save image as tar file for transfer
    - docker save $IMAGE_NAME:$IMAGE_TAG | gzip > scio-website-image.tar.gz

  artifacts:
    paths:
      - scio-website-image.tar.gz
    expire_in: 1 hour
  only:
    - main

# Deploy to production server (using runner's SSH key on Ubuntu host)
deploy_production:
  stage: deploy
  # Remove image - use shell executor directly on Ubuntu host
  before_script:
    # Ensure ssh is available (should already be on Ubuntu)
    - which ssh || (echo "SSH not found" && exit 1)
    - which scp || (echo "SCP not found" && exit 1)
  script:
    # Transfer Docker image to production server using runner's SSH key
    - scp -i ~/.ssh/gitlab_deploy -o StrictHostKeyChecking=no scio-website-image.tar.gz $DEPLOY_USER@$DEPLOY_HOST:/tmp/

    # Deploy on production server via SSH
    - |
      ssh -i ~/.ssh/gitlab_deploy -o StrictHostKeyChecking=no $DEPLOY_USER@$DEPLOY_HOST "
        # Load new Docker image
        cd /tmp &&
        gunzip -c scio-website-image.tar.gz | docker load &&
      
        # Stop and remove old container
        docker stop scio-website || true &&
        docker rm scio-website || true &&
      
        # Start new container with environment variables
        docker run -d \
          --name scio-website \
          --restart unless-stopped \
          -p 127.0.0.1:3001:3001 \
          -e NODE_ENV=production \
          -e PORT=3001 \
          -e MAIL_HOST='$MAIL_HOST' \
          -e MAIL_PORT='$MAIL_PORT' \
          -e MAIL_SECURE='$MAIL_SECURE' \
          -e MAIL_USER='$MAIL_USER' \
          -e MAIL_PASSWORD='$MAIL_PASSWORD' \
          -e MAIL_FROM='$MAIL_FROM' \
          -e MAIL_TO='$MAIL_TO' \
          -e COMPANY_NAME='Corporación Scio' \
          -e SEND_CONFIRMATION='$SEND_CONFIRMATION' \
          $IMAGE_NAME:$IMAGE_TAG &&
      
        # Cleanup
        rm /tmp/scio-website-image.tar.gz &&
        docker image prune -f &&
      
        # Verify deployment
        sleep 5 &&
        curl -f http://localhost:3001/api/health || exit 1
      "
  environment:
    name: production
    url: https://sciocorp.org
  only:
    - main
  needs:
    - build_production

# Future: Deploy to staging (same server as GitLab)
deploy_staging:
  stage: deploy
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  script:
    # Load the built image
    - docker load < scio-website-image.tar.gz

    # Stop and remove old staging container
    - docker stop scio-website-staging || true
    - docker rm scio-website-staging || true

    # Start staging container on different port
    - |
      docker run -d \
        --name scio-website-staging \
        --restart unless-stopped \
        -p 127.0.0.1:3002:3001 \
        -e NODE_ENV=staging \
        -e PORT=3001 \
        -e MAIL_HOST='$STAGING_MAIL_HOST' \
        -e MAIL_PORT='$STAGING_MAIL_PORT' \
        -e MAIL_SECURE='$STAGING_MAIL_SECURE' \
        -e MAIL_USER='$STAGING_MAIL_USER' \
        -e MAIL_PASSWORD='$STAGING_MAIL_PASSWORD' \
        -e MAIL_FROM='$STAGING_MAIL_FROM' \
        -e MAIL_TO='$STAGING_MAIL_TO' \
        -e COMPANY_NAME='Corporación Scio - Staging' \
        -e SEND_CONFIRMATION='true' \
        $IMAGE_NAME:$IMAGE_TAG

    # Verify staging deployment
    - sleep 5
    - curl -f http://localhost:3002/api/health

  environment:
    name: staging
    url: http://your-gitlab-server:3002
  only:
    - develop  # Deploy staging from develop branch
  needs:
    - build_production
  when: manual  # Manual deployment for now